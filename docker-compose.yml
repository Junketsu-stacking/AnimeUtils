version: '3.8'

services:
  frontend:
    image: ${DOCKER_REGISTRY}/frontend:${FRONTEND_TAG:-latest}
    container_name: frontend
    env_file:
      - ./.env
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENV=${NODE_ENV:-production}
    container_name: backend
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgres://${DB_ROOT_USERNAME}:${DB_ROOT_PASSWORD}@db:5432/${DB_DATABASE}
    command: >
      sh -c "alembic upgrade head &&
      uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers ${UVICORN_WORKERS:-4}"
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  business-logic:
    image: ${DOCKER_REGISTRY}/business-logic:${BUSINESS_LOGIC_TAG:-latest}
    container_name: business-logic
    env_file:
      - ./.env
    ports:
      - "${BUSINESS_LOGIC_PORT:-5000}:5000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G

  db:
    image: postgres:14.8-alpine3.18
    container_name: postgres_db
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_ROOT_USERNAME}
      POSTGRES_PASSWORD: ${DB_ROOT_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_ROOT_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:7.2
    container_name: pgadmin
    env_file:
      - ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - app-network
    depends_on:
      - db
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  traefik:
    image: traefik:v2.8
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml
    networks:
      - app-network

volumes:
  pg_data:
    driver: local
    driver_opts:
      type: none
      device: ${VOLUME_PATH:-./data/postgres}
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${VOLUME_PATH:-./data/redis}
      o: bind

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24